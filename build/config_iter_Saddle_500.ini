[Computing]
LoadColor=1;
numberOfCores=-1; how many cores to use. -1 for maximum possible
[Saddle]
doBaumberg=false;
responseThr=0;
scaleFactor=1.3;
nlevels=8
edgeThreshold=31; //31 = ORB
epsilon=1;
WTA_K=2;
scoreType=DELTA
;cmp::SORB::DELTA_SCORE;
patchSize=31;//31 = ORB
doNMS=1;
descSize=32;
deltaThr=1;
nfeatures = 500;
allC1feats=false
strictMaximum=true;
subPixPrecision=0 ;
gravityCenter=false;
innerTstType=1;
minArcLength=2;
maxArcLength=8;
[FREAK];OpenCV implementation == author`s
orientationNormalized=1
scaleNormalized=1
patternScale = 32.0;
nOctaves=4;
[ORB];OpenCV implementation
nfeatures = 500;
scaleFactor = 1.2;
nlevels = 8;
edgeThreshold = 31;
firstLevel = 0;
WTA_K=2;
patchSize=31;
[DominantOrientation]
mrSize = 5.1962; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) for orientation estimation
patchSize = 41;  width and height of the patch
maxAngles = 2
threshold = 0.8; fraction of max peak to add peak
addUpright=false
halfSIFTMode = false;
[SIFTDescriptor] ;CMP implementation
photoNorm=true;
FastPatchExtraction=false
spatialBins = 4;  width and height bins 
orientationBins = 8;
maxBinValue = 0.2;0.2; 
patchSize = 41;  width and height of the patch
useRootSIFT = 1; use RootSIFT instead of SIFT
mrSize = 5.1962 ; = 3.0f*sqrt(3.0f). size of the measurement region (as multiple of the feature scale) for SIFT computation
[Matching]; FLANN from OpenCV
binary_matcher=linear; Can be linear, lsh, hierarchical.
vector_matcher=kdtree;kdtree;Can be linear, kdtree,composite, kmeans
binary_dist=Hamming; Can be Hamming
vector_dist=L2;Can be L1,L2
doBothRANSACgroundTruth = 1; only when used ground truth mode
RANSACforStopping = 1; only when used ground truth mode and doBothRANSACgroundTruth =1
useDBforFGINN=0
SIFTDBfile=RootSIFTDB.txt;
matchRatioRootSIFT = 0.8; ratio of distances threshold
matchRatioHalfSIFT = 0.8; ratio of distances threshold
matchRatioHalfRootSIFT = 0.8; ratio of distances threshold
matchRatioInvSIFT = 0.8; ratio of distances threshold
matchRatioSIFT = 0.8; ratio of distances threshold
matchRatioSURF = 0.8; ratio of distances threshold
matchRatioLIOP = 0.8; ratio of distances threshold
matchRatioMROGH = 0.8; ratio of distances threshold
matchDistanceORB = 50; 
matchDistanceBRISK = 90; 
matchDistanceFREAK = 70; 
matchDistanceBRIEF = 70;
propagate_same_img=0
contradDist = 10.0;10.0; in pixels
checkFwithPTS = 0
kd_trees=2;
knn_checks=128;
doCLAHE=0;
[DuplicateFiltering]
doBeforeRANSAC = 1	;if == 0, tend to degenerated cases faster but a bit less true mathces
duplicateDist = 2.0	;in pixels
whichCorrespondenceRemains=bestFGINN;can random, bestFGINN, bestDistance, biggerRegion
[RANSAC] ;CMP implementation
err_threshold = 4.0;in pixels.
ErrorType=Sampson; Can be Sampson,SymmSum.
doSymmCheck = 1;
confidence = 0.99
max_samples = 1000000
localOptimization = 1
LAFcoef=3.0; LAFcoef*err_threshold = threshold for LAF-F-check. Use 0 to switch check off 
HLAFcoef=0; LAFcoef*err_threshold = threshold for Symmetrical LAF-H-check. Use 0 to switch check off 
;Symmetrical error >= 2* Sampson error, also LAF can be not precisely equal. 12 is recommended
[ImageOutput]
drawDetectedRegions=false
writeImages = 1
drawOnlyCenters = 0; if 0, all matches ellipses with orientations will be shown. 
drawEpipolarLines = 0; in F-mode only. 
drawReprojected = 0;0 == ASIFT-like output
[TextOutput]
verbose=1;
timeLog= 1;
featureComplemetaryLog = 0;
writeKeypoints = 1;
writeMatches = 1;
outputAllTentatives=0;
outputEstimatedHorF=0;
